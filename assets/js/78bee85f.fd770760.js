"use strict";(self.webpackChunkdevnotes=self.webpackChunkdevnotes||[]).push([[4067],{322:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>t});const r=JSON.parse('{"id":"docker/Docker-comand","title":"Docker Commands Cheat Sheet","description":"Command cheat-sheet for docker and docker compose for quick access","source":"@site/docs/docker/Docker-comand.md","sourceDirName":"docker","slug":"/docker/Docker-comand","permalink":"/DevNotes/docs/docker/Docker-comand","draft":false,"unlisted":false,"editUrl":"https://github.com/nitinawari/DevNotes/tree/main/docs/docker/Docker-comand.md","tags":[],"version":"current","frontMatter":{},"sidebar":"MyWikiSidebar","previous":{"title":"Docker","permalink":"/DevNotes/docs/category/docker"}}');var c=o(4848),a=o(8453);const s={},d="Docker Commands Cheat Sheet",i={},t=[{value:"Command cheat-sheet for docker and docker compose for quick access",id:"command-cheat-sheet-for-docker-and-docker-compose-for-quick-access",level:2},{value:"1.Docker Version &amp; Info",id:"1docker-version--info",level:2},{value:"2.Docker Images",id:"2docker-images",level:2},{value:"3.Docker Containers",id:"3docker-containers",level:2},{value:"4.Docker Container Logs &amp; Stats",id:"4docker-container-logs--stats",level:2},{value:"5.Docker Networking",id:"5docker-networking",level:2},{value:"6.Docker Volumes",id:"6docker-volumes",level:2},{value:"7.Docker Compose (if you use docker-compose)",id:"7docker-compose-if-you-use-docker-compose",level:2},{value:"8.Cleanup Commands",id:"8cleanup-commands",level:2},{value:"9.Helpful Flags",id:"9helpful-flags",level:2}];function l(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"docker-commands-cheat-sheet",children:"Docker Commands Cheat Sheet"})}),"\n",(0,c.jsx)(n.h2,{id:"command-cheat-sheet-for-docker-and-docker-compose-for-quick-access",children:"Command cheat-sheet for docker and docker compose for quick access"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.em,{children:"11 August 2025"})}),"\n",(0,c.jsx)(n.h2,{id:"1docker-version--info",children:"1.Docker Version & Info"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"docker --version                # Show Docker version\ndocker info                     # Display system-wide information\n"})}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h2,{id:"2docker-images",children:"2.Docker Images"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"docker pull <image>            # Download an image from Docker Hub\ndocker images                  # List local images\ndocker rmi <image_id|name>     # Remove an image\ndocker tag <image> <new_tag>   # Tag an image\ndocker build -t <name> .       # Build image from Dockerfile in current directory\n"})}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h2,{id:"3docker-containers",children:"3.Docker Containers"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"docker run <image>                 # Run container from image\ndocker run -d <image>              # Run container in detached mode (background)\ndocker run -it <image> /bin/bash   # Run container interactively with a bash shell\n\ndocker ps                      # List running containers\ndocker ps -a                   # List all containers (including stopped)\ndocker stop <container_id>     # Stop a running container\ndocker kill <container_id>     # Kill a running container immediately\ndocker rm <container_id>       # Remove a stopped container\ndocker exec -it <container_id> /bin/bash  # Open a shell inside a running container\n"})}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h2,{id:"4docker-container-logs--stats",children:"4.Docker Container Logs & Stats"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"docker logs <container_id>     # Show logs of a container\ndocker logs -f <container_id>  # Follow logs output\ndocker stats <container_id>    # Show live resource usage stats\n"})}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h2,{id:"5docker-networking",children:"5.Docker Networking"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"docker network ls             # List networks\ndocker network create <name>  # Create a new network\ndocker network rm <name>      # Remove a network\ndocker network inspect <name> # Show detailed info about a network\n"})}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h2,{id:"6docker-volumes",children:"6.Docker Volumes"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"docker volume ls             # List volumes\ndocker volume create <name>  # Create a volume\ndocker volume rm <name>      # Remove a volume\ndocker volume inspect <name> # Inspect a volume\n"})}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h2,{id:"7docker-compose-if-you-use-docker-compose",children:"7.Docker Compose (if you use docker-compose)"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"docker-compose up             # Build, (re)create, start containers\ndocker-compose up -d          # Start containers in detached mode\ndocker-compose down           # Stop and remove containers, networks, volumes\ndocker-compose logs           # View output logs from containers\ndocker-compose build          # Build or rebuild services\n"})}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h2,{id:"8cleanup-commands",children:"8.Cleanup Commands"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"docker system prune           # Remove unused data (dangling images, stopped containers, unused networks)\ndocker container prune        # Remove all stopped containers\ndocker image prune            # Remove dangling images\ndocker volume prune           # Remove unused volumes\n"})}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h2,{id:"9helpful-flags",children:"9.Helpful Flags"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"-p <host_port>:<container_port> \u2014 Map ports from container to host\n\n--name <container_name> \u2014 Assign a name to container\n\n-v <host_path>:<container_path> \u2014 Mount a volume or folder\n\n-e VAR=value \u2014 Set environment variables\n"})}),"\n",(0,c.jsx)(n.hr,{})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>d});var r=o(6540);const c={},a=r.createContext(c);function s(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);