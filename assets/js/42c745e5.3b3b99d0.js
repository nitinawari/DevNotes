"use strict";(self.webpackChunkdevnotes=self.webpackChunkdevnotes||[]).push([[5584],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},8615:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Git & Github/git-cheatsheet","title":"Git & GitHub Cheatsheet","description":"Commands cheatsheet","source":"@site/docs/Git & Github/git-cheatsheet.md","sourceDirName":"Git & Github","slug":"/Git & Github/git-cheatsheet","permalink":"/DevNotes/docs/Git & Github/git-cheatsheet","draft":false,"unlisted":false,"editUrl":"https://github.com/nitinawari/DevNotes/tree/main/docs/Git & Github/git-cheatsheet.md","tags":[],"version":"current","frontMatter":{"sidebar_postion":2},"sidebar":"MyWikiSidebar","previous":{"title":"Git & GitHub Terminologies","permalink":"/DevNotes/docs/Git & Github/git&github-terminologies"}}');var a=t(4848),i=t(8453);const r={sidebar_postion:2},o="Git & GitHub Cheatsheet",h={},c=[{value:"Commands cheatsheet",id:"commands-cheatsheet",level:2},{value:"1. Setup",id:"1-setup",level:2},{value:"2. SSH setup with github",id:"2-ssh-setup-with-github",level:2},{value:"3. Everyday Workflow",id:"3-everyday-workflow",level:2},{value:"4. Branching",id:"4-branching",level:2},{value:"5. Collaboration",id:"5-collaboration",level:2},{value:"6. History &amp; Undo",id:"6-history--undo",level:2},{value:"7. stash Commands",id:"7-stash-commands",level:2},{value:"8 . Rebase commands",id:"8--rebase-commands",level:2}];function l(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"git--github-cheatsheet",children:"Git & GitHub Cheatsheet"})}),"\n",(0,a.jsx)(n.h2,{id:"commands-cheatsheet",children:"Commands cheatsheet"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"11 august 2025"})}),"\n",(0,a.jsx)(n.h2,{id:"1-setup",children:"1. Setup"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Set your identity\ngit config --global user.name "Your Name"\ngit config --global user.email "you@example.com"\n\n# Check your config\ngit config --list\n\n# Initialize a new repo\ngit init\n\n# Clone a repo\ngit clone https://github.com/user/repo.git\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"2-ssh-setup-with-github",children:"2. SSH setup with github"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# check if already ssh available --- id_rsa / id_rsa.pub or id_ed25519 / id_ed25519.pub\nls -al ~/.ssh\n\n# if not , generate new ssh key \nssh-keygen -t ed25519 -C "your_email@example.com"\n\n# If you need RSA for compatibility:(Optional)\nssh-keygen -t rsa -b 4096 -C "your_email@example.com"\n\n - Press Enter to accept default location (~/.ssh/id_ed25519).\n - Set a passphrase (optional, but adds security).\n\n# Start the SSH agent\neval "$(ssh-agent -s)"\n\n# your SSH private key to the agent\nssh-add ~/.ssh/id_ed25519\n\n# Copy your SSH public key\ncat ~/.ssh/id_ed25519.pub\n\n# Add the key to GitHub\n - Go to GitHub \u2192 Settings \u2192 SSH and GPG keys \u2192 New SSH key.\n - Paste the public key and give it a name (e.g., "My Laptop").\n - Save.\n\n# Test your connection\nssh -T git@github.com\n - If successful, you\u2019ll see:\n - Hi username! You\'ve successfully authenticated...\n\n# Use SSH \ngit clone git@github.com:user/repo.git\n\n'})}),"\n",(0,a.jsx)(n.h2,{id:"3-everyday-workflow",children:"3. Everyday Workflow"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Check repo status\ngit status\n\n# Add files to staging\ngit add file.txt         # single file\ngit add .                # all changes\n\n# Commit changes\ngit commit -m "Message here"\n\n# Shortcut: add & commit in one step\ngit commit -am "Message here"\n\n# Push changes\ngit push origin main\n\n# Pull latest changes\ngit pull origin main\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"4-branching",children:"4. Branching"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# List branches\ngit branch\n\n# Create branch\ngit branch new-feature\n\n# Switch branch\ngit checkout new-feature\ngit switch new-feature   # newer syntax\n\n# Create & switch in one step\ngit checkout -b new-feature\n\n# Merge branch into current branch\ngit merge new-feature\n\n# Delete branch\ngit branch -d branch_name\ngit branch -D branch_name   # force delete\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"5-collaboration",children:"5. Collaboration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Fetch changes without merging\ngit fetch\n\n# View remote branches\ngit branch -r\n\n# Add remote\ngit remote add origin https://github.com/user/repo.git\n\n# View remotes\ngit remote -v\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"6-history--undo",children:"6. History & Undo"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Show commit history\ngit log\ngit log --oneline --graph --decorate --all\n\n# Show changes\ngit diff             # unstaged changes\ngit diff --staged    # staged changes\n\n# Undo staged file\ngit reset file.txt\n\n# Undo last commit but keep changes\ngit reset --soft HEAD~1\n\n# Undo last commit and remove changes\ngit reset --hard HEAD~1\n\n# Revert a commit (create a new commit to undo)\ngit revert <commit-hash>\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"7-stash-commands",children:"7. stash Commands"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Save your uncommitted changes (stash them)\ngit stash\n\n# Save with a custom message\ngit stash save "message describing changes"\n\n# List all stash entries\ngit stash list\n\n# Apply the latest stash but keep it in the stash list\ngit stash apply\n\n# Apply and remove the latest stash\ngit stash pop\n\n# Apply a specific stash by name (from stash list)\ngit stash apply stash@{2}\n\n# Drop (delete) a specific stash entry\ngit stash drop stash@{1}\n\n# Clear all stash entries\ngit stash clear\n\n'})}),"\n",(0,a.jsx)(n.h2,{id:"8--rebase-commands",children:"8 . Rebase commands"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Start an interactive rebase for the last 3 commits (change 3 as needed)\ngit rebase -i HEAD~3\n\n# Rebase current branch onto main branch (move your commits on top of main)\ngit rebase main\n\n# Abort an ongoing rebase and return to previous state\ngit rebase --abort\n\n# Continue a rebase after resolving conflicts\ngit rebase --continue\n\n# Skip the current patch during rebase (useful if a commit causes conflicts you want to ignore)\ngit rebase --skip\n\n# Rebase and preserve merges (experimental, use carefully)\ngit rebase --preserve-merges main\n\n# Rebase using the "merge" backend (older method, rarely used now)\ngit rebase --merge main\n\n---\n\n### Quick Visual of a Common Workflow\n```bash\ngit clone <repo-url>\ngit checkout -b new-feature\n# make changes\ngit add .\ngit commit -m "Add new feature"\ngit push origin new-feature\n# open PR on GitHub\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);